
R version 4.4.0 RC (2024-04-16 r86468) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "inTrees"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "inTrees-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('inTrees')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GBM2List")
> ### * GBM2List
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GBM2List
> ### Title: Transform gbm object to a list of trees
> ### Aliases: GBM2List
> ### Keywords: gbm
> 
> ### ** Examples
> 
>     library(gbm)
Loaded gbm 2.1.9
This version of gbm is no longer under development. Consider transitioning to gbm3, https://github.com/gbm-developers/gbm3
>     data(iris)
>     X <- iris[,1:(ncol(iris)-1)]
>     target <- iris[,"Species"] 
>     gbmFit <- gbm(Species~ ., data=iris, n.tree = 400,
+                     interaction.depth = 10,distribution="multinomial")
Warning: Setting `distribution = "multinomial"` is ill-advised as it is currently broken. It exists only for backwards compatibility. Use at your own risk.
>     treeList <- GBM2List(gbmFit,X)
>     ruleExec = extractRules(treeList,X)
596 rules (length<=6) were extracted from the first 100 trees.
>     ruleExec <- unique(ruleExec)
>     #ruleExec <- ruleExec[1:min(2000,length(ruleExec)),,drop=FALSE]
>     ruleMetric <- getRuleMetric(ruleExec,X,target)
>     ruleMetric <- pruneRule(ruleMetric,X,target)
>     ruleMetric <- unique(ruleMetric)
>     learner <- buildLearner(ruleMetric,X,target)
>     pred <- applyLearner(learner,X)
>     readableLearner <- presentRules(learner,colnames(X)) # more readable format
>     err <- 1-sum(pred==target)/length(pred);
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GBM2List", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:gbm’

> nameEx("Num2Level")
> ### * Num2Level
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Num2Level
> ### Title: internal function
> ### Aliases: Num2Level
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (rfList, splitV) 
+ {
+     for (i in 1:rfList$ntree) {
+         rfList$list[[i]] <- data.frame(rfList$list[[i]])
+         rfList$list[[i]][, "prediction"] <- data.frame(dicretizeVector(rfList$list[[i]][, 
+             "prediction"], splitV))
+         colnames(rfList$list[[i]]) <- c("left daughter", "right daughter", 
+             "split var", "split point", "status", "prediction")
+     }
+     return(rfList)
+   }
function (rfList, splitV) 
{
    for (i in 1:rfList$ntree) {
        rfList$list[[i]] <- data.frame(rfList$list[[i]])
        rfList$list[[i]][, "prediction"] <- data.frame(dicretizeVector(rfList$list[[i]][, 
            "prediction"], splitV))
        colnames(rfList$list[[i]]) <- c("left daughter", "right daughter", 
            "split var", "split point", "status", "prediction")
    }
    return(rfList)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Num2Level", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RF2List")
> ### * RF2List
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RF2List
> ### Title: Transform a random forest object to a list of trees
> ### Aliases: RF2List
> ### Keywords: randomforest
> 
> ### ** Examples
> 
> library(RRF)
RRF 1.9.4
Type rrfNews() to see new features/changes/bug fixes.
> data(iris)
> X <- iris[,1:(ncol(iris)-1)]
> target <- iris[,"Species"] 
> rf <- RRF(X,as.factor(target),ntree=100) # build an ordinary RF 
> treeList <- RF2List(rf)
> ruleExec <- extractRules(treeList,X) # transform to R-executable rules
705 rules (length<=6) were extracted from the first 100 trees.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RF2List", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:RRF’

> nameEx("XGB2List")
> ### * XGB2List
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: XGB2List
> ### Title: Transform an xgboost object to a list of trees
> ### Aliases: XGB2List
> ### Keywords: xgboost
> 
> ### ** Examples
> 
> 	library(data.table)
> 	library(xgboost)
> 	# test data set 1: iris
> 	X <- within(iris,rm("Species")); Y <- iris[,"Species"]
> 	X <- within(iris,rm("Species")); Y <- iris[,"Species"]
> 	model_mat <- model.matrix(~. -1, data=X)
> 	xgb <- xgboost(model_mat, label = as.numeric(Y) - 1, nrounds = 20, 
+ 		objective = "multi:softprob", num_class = 3 )
[1]	train-mlogloss:0.736115 
[2]	train-mlogloss:0.524235 
[3]	train-mlogloss:0.387996 
[4]	train-mlogloss:0.294146 
[5]	train-mlogloss:0.226824 
[6]	train-mlogloss:0.177835 
[7]	train-mlogloss:0.141766 
[8]	train-mlogloss:0.115002 
[9]	train-mlogloss:0.094791 
[10]	train-mlogloss:0.078860 
[11]	train-mlogloss:0.066746 
[12]	train-mlogloss:0.057845 
[13]	train-mlogloss:0.050360 
[14]	train-mlogloss:0.044290 
[15]	train-mlogloss:0.039567 
[16]	train-mlogloss:0.035267 
[17]	train-mlogloss:0.032581 
[18]	train-mlogloss:0.030403 
[19]	train-mlogloss:0.028410 
[20]	train-mlogloss:0.026969 
> 	tree_list <- XGB2List(xgb,model_mat)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("XGB2List", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:xgboost’, ‘package:data.table’

> nameEx("buildLearner")
> ### * buildLearner
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: buildLearner
> ### Title: build a simplified tree ensemble learner (STEL)
> ### Aliases: buildLearner
> ### Keywords: STEL learner
> 
> ### ** Examples
> 
> data(iris)
> library(RRF)
RRF 1.9.4
Type rrfNews() to see new features/changes/bug fixes.
> X <- iris[,1:(ncol(iris)-1)]
> target <- iris[,"Species"] 
> rf <- RRF(X,as.factor(target),ntree=100) # build an ordinary RF 
> treeList <- RF2List(rf)
> ruleExec <- extractRules(treeList,X)
705 rules (length<=6) were extracted from the first 100 trees.
> ruleExec <- unique(ruleExec)
> ruleMetric <- getRuleMetric(ruleExec,X,target) # measure rules
> ruleMetric <- pruneRule(ruleMetric,X,target) # prune each rule
> #ruleMetric <- selectRuleRRF(ruleMetric,X,target) # rule selection
> learner <- buildLearner(ruleMetric,X,target)
> pred <- applyLearner(learner,X)
> read <- presentRules(learner,colnames(X)) # more readable format
> 
> # format the rule and metrics as a table in latex code
> library(xtable)
> print(xtable(read), include.rownames=FALSE)
% latex table generated in R 4.4.0 by xtable 1.8-4 package
% Mon Apr 22 22:27:01 2024
\begin{table}[ht]
\centering
\begin{tabular}{lllll}
  \hline
len & freq & err & condition & pred \\ 
  \hline
1 & 0.333333333333333 & 0 & Petal.Length$<$=2.45 & setosa \\ 
  3 & 0.313333333333333 & 0 & Petal.Length$>$2.45 \& Petal.Length$<$=4.95 \& Petal.Width$<$=1.65 & versicolor \\ 
  2 & 0.286666666666667 & 0 & Petal.Length$>$4.85 \& Petal.Width$>$1.75 & virginica \\ 
  2 & 0.02 & 0 & Petal.Length$>$4.95 \& Petal.Width$<$=1.55 & virginica \\ 
  3 & 0.02 & 0 & Sepal.Width$<$=3.1 \& Petal.Length$<$=4.85 \& Petal.Width$>$1.55 & virginica \\ 
  2 & 0.0133333333333333 & 0 & Petal.Length$<$=5.35 \& Petal.Width$<$=1.7 & versicolor \\ 
  1 & 0.0133333333333333 & 0.5 & Else & versicolor \\ 
   \hline
\end{tabular}
\end{table}
> print(xtable(ruleMetric[1:2,]), include.rownames=FALSE)
% latex table generated in R 4.4.0 by xtable 1.8-4 package
% Mon Apr 22 22:27:01 2024
\begin{table}[ht]
\centering
\begin{tabular}{lllll}
  \hline
len & freq & err & condition & pred \\ 
  \hline
1 & 0.333 & 0 & X[,3]$<$=2.45 & setosa \\ 
  2 & 0.3 & 0.022 & X[,3]$>$2.45 \& X[,3]$<$=4.75 & versicolor \\ 
   \hline
\end{tabular}
\end{table}
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("buildLearner", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:xtable’, ‘package:RRF’

> nameEx("computeRuleInfor")
> ### * computeRuleInfor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: computeRuleInfor
> ### Title: compute rule information
> ### Aliases: computeRuleInfor
> ### Keywords: internal
> 
> ### ** Examples
> 
> 	# this is an internal function.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("computeRuleInfor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dataSimulate")
> ### * dataSimulate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dataSimulate
> ### Title: Simulate data
> ### Aliases: dataSimulate
> ### Keywords: simulate
> 
> ### ** Examples
> 
> res <- dataSimulate(flag=1)
> X <- res$X; 
> target <- res$target
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dataSimulate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dicretizeVector")
> ### * dicretizeVector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dicretizeVector
> ### Title: discretize a variable
> ### Aliases: dicretizeVector
> ### Keywords: discretize
> 
> ### ** Examples
> 
>  data(iris)
>  dicretizeVector(iris[,1],3)
  [1] "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L2"
 [16] "L2" "L1" "L1" "L2" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1"
 [31] "L1" "L1" "L1" "L2" "L1" "L1" "L2" "L1" "L1" "L1" "L1" "L1" "L1" "L1" "L1"
 [46] "L1" "L1" "L1" "L1" "L1" "L3" "L3" "L3" "L2" "L3" "L2" "L2" "L1" "L3" "L1"
 [61] "L1" "L2" "L2" "L2" "L2" "L3" "L2" "L2" "L2" "L2" "L2" "L2" "L2" "L2" "L3"
 [76] "L3" "L3" "L3" "L2" "L2" "L2" "L2" "L2" "L2" "L1" "L2" "L3" "L2" "L2" "L2"
 [91] "L2" "L2" "L2" "L1" "L2" "L2" "L2" "L2" "L1" "L2" "L2" "L2" "L3" "L2" "L3"
[106] "L3" "L1" "L3" "L3" "L3" "L3" "L3" "L3" "L2" "L2" "L3" "L3" "L3" "L3" "L2"
[121] "L3" "L2" "L3" "L2" "L3" "L3" "L2" "L2" "L3" "L3" "L3" "L3" "L3" "L2" "L2"
[136] "L3" "L2" "L3" "L2" "L3" "L3" "L3" "L2" "L3" "L3" "L3" "L2" "L3" "L2" "L2"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dicretizeVector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("extractRules")
> ### * extractRules
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extractRules
> ### Title: Extract rules from a list of trees
> ### Aliases: extractRules
> ### Keywords: extract
> 
> ### ** Examples
> 
>     library(RRF)
RRF 1.9.4
Type rrfNews() to see new features/changes/bug fixes.
>     data(iris)
>     X <- iris[,1:(ncol(iris)-1)]
>     target <- iris[,"Species"] 
>     rf <- RRF(X,as.factor(target),ntree=100) # build an ordinary RF 
>     treeList <- RF2List(rf)
>     ruleExec <- extractRules(treeList,X,digits=4) # transform to R-executable rules
705 rules (length<=6) were extracted from the first 100 trees.
>     ruleExec <- unique(ruleExec)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extractRules", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:RRF’

> nameEx("formatGBM")
> ### * formatGBM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: formatGBM
> ### Title: internal
> ### Aliases: formatGBM
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (gbmList, splitBin,X) 
+ {
+     for (j in 1:length(gbmList$list)) {
+         a <- gbmList$list[[j]]
+         rownames(a) <- 1:nrow(a)
+         a$status <- a$SplitVar
+         a <- a[, c("LeftNode", "RightNode", "MissingNode", "SplitVar", 
+             "SplitCodePred", "status")]
+         a[which(a[, "SplitVar"] >= 0), c("SplitVar", "LeftNode", 
+             "RightNode", "MissingNode")] <- a[which(a[, "SplitVar"] >= 
+             0), c("SplitVar", "LeftNode", "RightNode", "MissingNode")] + 
+             1
+         ix <- a$MissingNode[which(a$MissingNode > 0)]
+         if (length(ix) > 0) 
+             a$status[ix] <- 10
+         a <- a[, c("LeftNode", "RightNode", "SplitVar", "SplitCodePred", 
+             "status")]
+         cat <- which(sapply(X, is.factor) & !sapply(X, is.ordered))
+         ix <- which(a[, "SplitVar"] %in% cat)
+         for (i in ix) a[i, "SplitCodePred"] <- splitBin[a[i, 
+             "SplitCodePred"] + 1]
+         colnames(a) <- c("left daughter", "right daughter", "split var", 
+             "split point", "status")
+         gbmList$list[[j]] <- a
+     }
+     return(gbmList)
+   }
function (gbmList, splitBin, X) 
{
    for (j in 1:length(gbmList$list)) {
        a <- gbmList$list[[j]]
        rownames(a) <- 1:nrow(a)
        a$status <- a$SplitVar
        a <- a[, c("LeftNode", "RightNode", "MissingNode", "SplitVar", 
            "SplitCodePred", "status")]
        a[which(a[, "SplitVar"] >= 0), c("SplitVar", "LeftNode", 
            "RightNode", "MissingNode")] <- a[which(a[, "SplitVar"] >= 
            0), c("SplitVar", "LeftNode", "RightNode", "MissingNode")] + 
            1
        ix <- a$MissingNode[which(a$MissingNode > 0)]
        if (length(ix) > 0) 
            a$status[ix] <- 10
        a <- a[, c("LeftNode", "RightNode", "SplitVar", "SplitCodePred", 
            "status")]
        cat <- which(sapply(X, is.factor) & !sapply(X, is.ordered))
        ix <- which(a[, "SplitVar"] %in% cat)
        for (i in ix) a[i, "SplitCodePred"] <- splitBin[a[i, 
            "SplitCodePred"] + 1]
        colnames(a) <- c("left daughter", "right daughter", "split var", 
            "split point", "status")
        gbmList$list[[j]] <- a
    }
    return(gbmList)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("formatGBM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getFreqPattern")
> ### * getFreqPattern
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getFreqPattern
> ### Title: calculate frequent variable interactions
> ### Aliases: getFreqPattern
> ### Keywords: variable interaction
> 
> ### ** Examples
> 
> library(RRF)
RRF 1.9.4
Type rrfNews() to see new features/changes/bug fixes.
> library(arules)
Loading required package: Matrix

Attaching package: ‘arules’

The following objects are masked from ‘package:base’:

    abbreviate, write

> data(iris)
> X <- iris[,1:(ncol(iris)-1)]
> target <- iris[,"Species"] 
> rf <- RRF(X,as.factor(target),ntree=100) # build an ordinary RF 
> treeList <- RF2List(rf)
> ruleExec <- extractRules(treeList,X) # transform to R-executable rules
705 rules (length<=6) were extracted from the first 100 trees.
> ruleMetric <- getRuleMetric(ruleExec,X,target) 
> freqPattern <- getFreqPattern(ruleMetric)
> freqPatternMetric <- getRuleMetric(freqPattern,X,target)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getFreqPattern", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:arules’, ‘package:Matrix’, ‘package:RRF’

> nameEx("getRuleMetric")
> ### * getRuleMetric
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getRuleMetric
> ### Title: Assign outcomes to a conditions, and measure the rules
> ### Aliases: getRuleMetric
> ### Keywords: measure rank
> 
> ### ** Examples
> 
> library(RRF)
RRF 1.9.4
Type rrfNews() to see new features/changes/bug fixes.
> data(iris)
> X <- iris[,1:(ncol(iris)-1)]
> target <- iris[,"Species"] 
> rf <- RRF(X,as.factor(target),ntree=100) # build an ordinary RF 
> treeList <- RF2List(rf)
> ruleExec <- extractRules(treeList,X) # transform to R-executable rules
705 rules (length<=6) were extracted from the first 100 trees.
> ruleExec <- unique(ruleExec)
> ruleMetric <- getRuleMetric(ruleExec,X,target) # measure rules
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getRuleMetric", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:RRF’

> nameEx("lookupRule")
> ### * lookupRule
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lookupRule
> ### Title: internal
> ### Aliases: lookupRule
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (rules, strList) 
+ {
+     ix <- grep(strList[1], rules[, "condition"])
+     if (length(strList) >= 2) {
+         for (i in 2:length(strList)) {
+             ix2 <- grep(strList[i], rules[, "condition"])
+             ix <- intersect(ix, ix2)
+         }
+     }
+     if (length(ix) >= 1) 
+         return(rules[ix, , drop = FALSE])
+     if (length(ix) == 0) 
+         return(NULL)
+   }
function (rules, strList) 
{
    ix <- grep(strList[1], rules[, "condition"])
    if (length(strList) >= 2) {
        for (i in 2:length(strList)) {
            ix2 <- grep(strList[i], rules[, "condition"])
            ix <- intersect(ix, ix2)
        }
    }
    if (length(ix) >= 1) 
        return(rules[ix, , drop = FALSE])
    if (length(ix) == 0) 
        return(NULL)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lookupRule", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("measureRule")
> ### * measureRule
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: measureRule
> ### Title: internal
> ### Aliases: measureRule
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (ruleExec, X, target, pred = NULL) 
+ {
+     len <- length(unlist(strsplit(ruleExec, split = " & ")))
+     origRule <- ruleExec
+     ruleExec <- paste("which(", ruleExec, ")")
+     ixMatch <- eval(parse(text = ruleExec))
+     if (length(ixMatch) == 0) {
+         v <- c("-1", "-1", "-1", "", "")
+         names(v) <- c("len", "freq", "err", "condition", "pred")
+         return(v)
+     }
+     ys <- target[ixMatch]
+     freq <- round(length(ys)/nrow(X), digits = 3)
+     if (is.numeric(target)) {
+         ysMost <- mean(ys)
+         err <- sum((ysMost - ys)^2)/length(ys)
+     }
+     else {
+         if (length(pred) > 0) {
+             ysMost = pred
+         }
+         else {
+             ysMost <- names(which.max(table(ys)))
+         }
+         conf <- round(table(ys)[ysMost]/sum(table(ys)), digits = 3)
+         err <- 1 - conf
+     }
+     rule <- origRule
+     v <- c(len, freq, err, rule, ysMost)
+     names(v) <- c("len", "freq", "err", "condition", "pred")
+     return(v)
+   }
function (ruleExec, X, target, pred = NULL) 
{
    len <- length(unlist(strsplit(ruleExec, split = " & ")))
    origRule <- ruleExec
    ruleExec <- paste("which(", ruleExec, ")")
    ixMatch <- eval(parse(text = ruleExec))
    if (length(ixMatch) == 0) {
        v <- c("-1", "-1", "-1", "", "")
        names(v) <- c("len", "freq", "err", "condition", "pred")
        return(v)
    }
    ys <- target[ixMatch]
    freq <- round(length(ys)/nrow(X), digits = 3)
    if (is.numeric(target)) {
        ysMost <- mean(ys)
        err <- sum((ysMost - ys)^2)/length(ys)
    }
    else {
        if (length(pred) > 0) {
            ysMost = pred
        }
        else {
            ysMost <- names(which.max(table(ys)))
        }
        conf <- round(table(ys)[ysMost]/sum(table(ys)), digits = 3)
        err <- 1 - conf
    }
    rule <- origRule
    v <- c(len, freq, err, rule, ysMost)
    names(v) <- c("len", "freq", "err", "condition", "pred")
    return(v)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("measureRule", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("presentRules")
> ### * presentRules
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: presentRules
> ### Title: Present a learner using column names instead of X[i,]
> ### Aliases: presentRules
> ### Keywords: present
> 
> ### ** Examples
> 
>  # See function "buildLearner"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("presentRules", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pruneRule")
> ### * pruneRule
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pruneRule
> ### Title: Prune irrevant variable-value pair from a rule condition
> ### Aliases: pruneRule
> ### Keywords: prune
> 
> ### ** Examples
> 
> # see function "buildLearner"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pruneRule", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pruneSingleRule")
> ### * pruneSingleRule
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pruneSingleRule
> ### Title: internal
> ### Aliases: pruneSingleRule
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (rule, X, target, maxDecay, typeDecay) 
+ {
+     newRuleMetric <- measureRule(rule["condition"], X, target)
+     errOrig <- as.numeric(newRuleMetric["err"])
+     ruleV <- unlist(strsplit(rule["condition"], split = " & "))
+     pred <- rule["pred"]
+     if (length(ruleV) == 1) 
+         return(newRuleMetric)
+     for (i in length(ruleV):1) {
+         restRule <- ruleV[-i]
+         restRule <- paste(restRule, collapse = " & ")
+         metricTmp <- measureRule(restRule, X, target, pred)
+         errNew <- as.numeric(metricTmp["err"])
+         if (typeDecay == 1) {
+             decay <- (errNew - errOrig)/max(errOrig, 1e-06)
+         }
+         else {
+             decay <- (errNew - errOrig)
+         }
+         if (decay <= maxDecay) {
+             ruleV <- ruleV[-i]
+             newRuleMetric <- metricTmp
+             if (length(ruleV) <= 1) 
+                 break
+         }
+     }
+     return(newRuleMetric)
+   }
function (rule, X, target, maxDecay, typeDecay) 
{
    newRuleMetric <- measureRule(rule["condition"], X, target)
    errOrig <- as.numeric(newRuleMetric["err"])
    ruleV <- unlist(strsplit(rule["condition"], split = " & "))
    pred <- rule["pred"]
    if (length(ruleV) == 1) 
        return(newRuleMetric)
    for (i in length(ruleV):1) {
        restRule <- ruleV[-i]
        restRule <- paste(restRule, collapse = " & ")
        metricTmp <- measureRule(restRule, X, target, pred)
        errNew <- as.numeric(metricTmp["err"])
        if (typeDecay == 1) {
            decay <- (errNew - errOrig)/max(errOrig, 1e-06)
        }
        else {
            decay <- (errNew - errOrig)
        }
        if (decay <= maxDecay) {
            ruleV <- ruleV[-i]
            newRuleMetric <- metricTmp
            if (length(ruleV) <= 1) 
                break
        }
    }
    return(newRuleMetric)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pruneSingleRule", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rule2Table")
> ### * rule2Table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rule2Table
> ### Title: internal function
> ### Aliases: rule2Table
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (ruleExec, X, target) 
+ {
+     I <- rep(0, nrow(X))
+     ruleExec <- paste("which(", ruleExec, ")")
+     ixMatch <- eval(parse(text = ruleExec))
+     if (length(ixMatch) > 0) 
+         I[ixMatch] <- 1
+     names(I) = NULL
+     return(I)
+   }
function (ruleExec, X, target) 
{
    I <- rep(0, nrow(X))
    ruleExec <- paste("which(", ruleExec, ")")
    ixMatch <- eval(parse(text = ruleExec))
    if (length(ixMatch) > 0) 
        I[ixMatch] <- 1
    names(I) = NULL
    return(I)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rule2Table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ruleList2Exec")
> ### * ruleList2Exec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ruleList2Exec
> ### Title: internal
> ### Aliases: ruleList2Exec
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (X, allRulesList) 
+ {
+     typeX = getTypeX(X)
+     ruleExec <- unique(t(sapply(allRulesList, singleRuleList2Exec, 
+         typeX = typeX)))
+     ruleExec <- t(ruleExec)
+     colnames(ruleExec) <- "condition"
+     return(ruleExec)
+   }
function (X, allRulesList) 
{
    typeX = getTypeX(X)
    ruleExec <- unique(t(sapply(allRulesList, singleRuleList2Exec, 
        typeX = typeX)))
    ruleExec <- t(ruleExec)
    colnames(ruleExec) <- "condition"
    return(ruleExec)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ruleList2Exec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("selectRuleRRF")
> ### * selectRuleRRF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: selectRuleRRF
> ### Title: select a set of relevant and non-redundant rules
> ### Aliases: selectRuleRRF
> ### Keywords: select
> 
> ### ** Examples
> 
>  # See function "buildLearner:
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("selectRuleRRF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("singleRuleList2Exec")
> ### * singleRuleList2Exec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: singleRuleList2Exec
> ### Title: internal
> ### Aliases: singleRuleList2Exec
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (ruleList, typeX) 
+ {
+     ruleExec <- ""
+     vars <- ls(ruleList)
+     vars <- vars[order(as.numeric(vars))]
+     for (i in 1:length(vars)) {
+         if (typeX[as.numeric(vars[i])] == 2) {
+             values <- paste("c(", paste(paste("'", ruleList[[vars[i]]], 
+                 "'", sep = ""), collapse = ","), ")", sep = "")
+             tmp = paste("X[,", vars[i], "] %in% ", values, sep = "")
+         }
+         else {
+             tmp = ruleList[[vars[i]]]
+         }
+         if (i == 1) 
+             ruleExec <- paste(ruleExec, tmp, sep = "")
+         if (i > 1) 
+             ruleExec <- paste(ruleExec, " & ", tmp, sep = "")
+     }
+     return(c(ruleExec))
+   }
function (ruleList, typeX) 
{
    ruleExec <- ""
    vars <- ls(ruleList)
    vars <- vars[order(as.numeric(vars))]
    for (i in 1:length(vars)) {
        if (typeX[as.numeric(vars[i])] == 2) {
            values <- paste("c(", paste(paste("'", ruleList[[vars[i]]], 
                "'", sep = ""), collapse = ","), ")", sep = "")
            tmp = paste("X[,", vars[i], "] %in% ", values, sep = "")
        }
        else {
            tmp = ruleList[[vars[i]]]
        }
        if (i == 1) 
            ruleExec <- paste(ruleExec, tmp, sep = "")
        if (i > 1) 
            ruleExec <- paste(ruleExec, " & ", tmp, sep = "")
    }
    return(c(ruleExec))
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("singleRuleList2Exec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sortRule")
> ### * sortRule
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sortRule
> ### Title: internal
> ### Aliases: sortRule
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (M, decreasing = TRUE) 
+ {
+     qIx = order((1 - as.numeric(ruleMetric[, "err"])), as.numeric(ruleMetric[, 
+         "freq"]), -as.numeric(ruleMetric[, "len"]), decreasing = decreasing)
+     return(M[qIx, ])
+   }
function (M, decreasing = TRUE) 
{
    qIx = order((1 - as.numeric(ruleMetric[, "err"])), as.numeric(ruleMetric[, 
        "freq"]), -as.numeric(ruleMetric[, "len"]), decreasing = decreasing)
    return(M[qIx, ])
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sortRule", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("voteAllRules")
> ### * voteAllRules
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: voteAllRules
> ### Title: internal
> ### Aliases: voteAllRules
> ### Keywords: internal
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> ## The function is currently defined as
> function (ruleMetric, X, type = "r", method = "median") 
+ {
+     xVoteList = vector("list", nrow(X))
+     predY <- rep("", nrow(X))
+     for (i in 1:nrow(ruleMetric)) {
+         ixMatch <- eval(parse(text = paste("which(", ruleMetric[i, 
+             "condition"], ")")))
+         if (length(ixMatch) == 0) 
+             next
+         for (ii in ixMatch) {
+             xVoteList[[ii]] = c(xVoteList[[ii]], ruleMetric[i, 
+                 "pred"])
+         }
+     }
+     for (i in 1:length(xVoteList)) {
+         thisV <- xVoteList[[i]]
+         if (length(thisV) == 0) 
+             next
+         if (type == "c") 
+             predY[i] <- names(table(thisV)[which.max(table(thisV))])
+         if (type == "r") {
+             thisV = as.numeric(thisV)
+             if (method == "median") {
+                 predY[i] <- median(thisV)
+             }
+             else {
+                 predY[i] <- mean(thisV)
+             }
+         }
+     }
+     if (type == "r") 
+         predY <- as.numeric(predY)
+     return(predY)
+   }
function (ruleMetric, X, type = "r", method = "median") 
{
    xVoteList = vector("list", nrow(X))
    predY <- rep("", nrow(X))
    for (i in 1:nrow(ruleMetric)) {
        ixMatch <- eval(parse(text = paste("which(", ruleMetric[i, 
            "condition"], ")")))
        if (length(ixMatch) == 0) 
            next
        for (ii in ixMatch) {
            xVoteList[[ii]] = c(xVoteList[[ii]], ruleMetric[i, 
                "pred"])
        }
    }
    for (i in 1:length(xVoteList)) {
        thisV <- xVoteList[[i]]
        if (length(thisV) == 0) 
            next
        if (type == "c") 
            predY[i] <- names(table(thisV)[which.max(table(thisV))])
        if (type == "r") {
            thisV = as.numeric(thisV)
            if (method == "median") {
                predY[i] <- median(thisV)
            }
            else {
                predY[i] <- mean(thisV)
            }
        }
    }
    if (type == "r") 
        predY <- as.numeric(predY)
    return(predY)
}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("voteAllRules", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.499 0.057 2.594 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
