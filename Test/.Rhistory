if(is.numeric(digits)) digits <- as.integer(abs(digits))
levelX = list()
for(iX in 1:ncol(X))
levelX <- c(levelX,list(levels(X[,iX])))
# X <- NULL; target <- NULL
ntree=min(treeList$ntree,ntree)
allRulesList = list()
for(iTree in 1:ntree){
if(random==TRUE){max_length = sample(1:maxdepth,1,replace=FALSE)}else{
max_length = maxdepth}
rule = list(); count = 0; rowIx = 1;
# tree = getTree(rf,iTree,labelVar=FALSE)
tree <- treeList$list[[iTree]]
ruleSet = vector("list", length(which(tree[,"status"]==-1)))
res = treeVisit(tree,rowIx = rowIx,count,ruleSet,rule,levelX,length=0,max_length=max_length,digits=digits)
print(tree)
allRulesList = c(allRulesList, res$ruleSet)
}
allRulesList <- allRulesList[!unlist(lapply(allRulesList, is.null))]
cat(paste(length(allRulesList)," rules (length<=",
max_length, ") were extracted from the first ", ntree," trees.","\n",sep=""))
rulesExec <- ruleList2Exec(X,allRulesList)
return(rulesExec)
}
# Test XGBoost
require(data.table)
require(xgboost)
# test data set 1: iris
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
model_mat <- model.matrix(~. -1, data=X)
xgb <- xgboost(model_mat, label = as.numeric(Y) - 1, nrounds = 50,objective = "multi:softprob", num_class = 3 )
tree_list <- XGB2List(xgb,model_mat)
ruleExec <- extractRules(tree_list,model_mat)
extractRules <-
function(treeList,X,ntree=100,maxdepth=6,random=FALSE,digits=NULL){
if(is.numeric(digits)) digits <- as.integer(abs(digits))
levelX = list()
for(iX in 1:ncol(X))
levelX <- c(levelX,list(levels(X[,iX])))
# X <- NULL; target <- NULL
ntree=min(treeList$ntree,ntree)
allRulesList = list()
for(iTree in 1:ntree){
if(random==TRUE){max_length = sample(1:maxdepth,1,replace=FALSE)}else{
max_length = maxdepth}
rule = list(); count = 0; rowIx = 1;
# tree = getTree(rf,iTree,labelVar=FALSE)
tree <- treeList$list[[iTree]]
if(nrow(tree)<=1) next
ruleSet = vector("list", length(which(tree[,"status"]==-1)))
res = treeVisit(tree,rowIx = rowIx,count,ruleSet,rule,levelX,length=0,max_length=max_length,digits=digits)
allRulesList = c(allRulesList, res$ruleSet)
}
allRulesList <- allRulesList[!unlist(lapply(allRulesList, is.null))]
cat(paste(length(allRulesList)," rules (length<=",
max_length, ") were extracted from the first ", ntree," trees.","\n",sep=""))
rulesExec <- ruleList2Exec(X,allRulesList)
return(rulesExec)
}
tree_list <- XGB2List(xgb,model_mat)
ruleExec <- extractRules(tree_list,model_mat)
undebug(ruleList2Exec)
tree_list <- XGB2List(xgb,model_mat)
ruleExec <- extractRules(tree_list,model_mat)
xgb <- xgboost(model_mat, label = as.numeric(Y) - 1, nrounds = 150,objective = "binary:logistic" )
tree_list <- XGB2List(xgb,model_mat)
ruleExec <- extractRules(tree_list,model_mat)
require(data.table)
require(xgboost)
# test data set 1: iris
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
model_mat <- model.matrix(~. -1, data=X)
xgb <- xgboost(model_mat, label = as.numeric(Y) - 1, nrounds = 500,objective = "multi:softprob", num_class = 3 )
ruleExec <- extractRules(tree_list,model_mat)
uleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,model_mat,Y)
ruleMetric <- pruneRule(ruleMetric,model_mat,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, model_mat, Y)
ruleMetric <- unique(ruleMetric)
ruleClassifier <- buildLearner(ruleMetric,model_mat,Y)
readable <- presentRules(ruleClassifier,colnames(model_mat),digits=3)
pred <- applyLearner(ruleClassifier,model_mat)
errXGBoost=1-sum(pred==Y)/length(pred);
errXGBoost
library(ranger)
rf <- ranger(Species ~ ., data = iris)
treeInfo(rf, tree = 1)
ranger <- ranger(Species ~ ., data = iris)
treeInfo(ranger, tree = 1)
ranger
rf_ranger <- ranger(Species ~ ., data = iris)
sourceDir("devR/")
thisData <- c("german.data")
path <- paste(getwd(), "/data/",thisData,sep=""); #musk vehicle is good austra
X <- read.table(path,header=TRUE,sep = ",")
X[X[,]=="?"] <- NA
X <- na.roughfix(X)#Impute Missing Values by median/mode
Y <-  X[,ncol(X)]
X <- X[,-ncol(X)]
#Orig RF and calculate the importance
rf <- randomForest(X, as.factor(Y),ntree=100)
rm(list=ls(all=TRUE))
library(randomForest);
library(RRF);
graphics.off()
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("devR/")
thisData <- c("german.data")
path <- paste(getwd(), "/data/",thisData,sep=""); #musk vehicle is good austra
X <- read.table(path,header=TRUE,sep = ",")
X[X[,]=="?"] <- NA
X <- na.roughfix(X)#Impute Missing Values by median/mode
Y <-  X[,ncol(X)]
X <- X[,-ncol(X)]
#Orig RF and calculate the importance
rf <- randomForest(X, as.factor(Y),ntree=100)
treeList <- RF2List(rf)
treeList
# Test Ranger
library(ranger)
rf_ranger <- ranger(Species ~ ., data = iris)
treeInfo(rf_ranger, tree = 1)
rownames(tree) <- 1:nrow(tree)
tree$status <- ifelse(tree$`split var`==-1,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- treeInfo(rf_ranger, tree = 1)
tree
rownames(tree) <- 1:nrow(tree)
tree$status <- ifelse(tree$`split var`==-1,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`split var`==-1,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree
tree_list
tree <- treeInfo(rf_ranger, tree = 1)
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree
#Orig RF and calculate the importance
rf <- randomForest(X, as.factor(Y),ntree=2)
treeList <- RF2List(rf)
treeList
rf_ranger
rf_ranger$num.trees
formatRanger <- function(tree){
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- tree[,c("left daughter","right daughter","split var","split point","status")]
tree <- as.data.frame(tree)
return(tree)
}
treeList <- NULL
treeList$ntree <- length(unique(xt$Tree))
treeList$list <- vector("list",rf$ntree)
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
treeList <- NULL
treeList$ntree <- rf_ranger$num.trees
treeList$list <- vector("list",rf_ranger$num.trees)
treeList
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
treeList
require(ranger)
require(data.table)
XGB2List <- function(xgb, X)
{
formatRanger <- function(tree){
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- tree[,c("left daughter","right daughter","split var","split point","status")]
tree <- as.data.frame(tree)
return(tree)
}
treeList <- NULL
treeList$ntree <- rf_ranger$num.trees
treeList$list <- vector("list",rf_ranger$num.trees)
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
return(treeList)
}
require(ranger)
XGB2List <- function(xgb, X)
{
formatRanger <- function(tree){
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- tree[,c("left daughter","right daughter","split var","split point","status")]
tree <- as.data.frame(tree)
return(tree)
}
treeList <- NULL
treeList$ntree <- rf_ranger$num.trees
treeList$list <- vector("list",rf_ranger$num.trees)
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
return(treeList)
}
require(ranger)
Ranger2List <- function(rf_ranger)
{
formatRanger <- function(tree){
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild`
tree$`right daughter` <- tree$`rightChild`
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- tree[,c("left daughter","right daughter","split var","split point","status")]
tree <- as.data.frame(tree)
return(tree)
}
treeList <- NULL
treeList$ntree <- rf_ranger$num.trees
treeList$list <- vector("list",rf_ranger$num.trees)
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
return(treeList)
}
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
tree_list
ruleExec <- extractRules(tree_list,data,digits=3)
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,data,Y)
ruleMetric <- pruneRule(ruleMetric,data,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, data, Y)
ruleMetric <- unique(ruleMetric)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
ruleExec <- extractRules(tree_list,X,digits=3)
ruleExec
ruleExec <- unique(ruleExec)
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec)))
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,data,Y)
ruleMetric <- pruneRule(ruleMetric,data,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, data, Y)
ruleMetric <- unique(ruleMetric)
ruleMetric <- getRuleMetric(ruleExec,X,Y)
ruleMetric <- pruneRule(ruleMetric,X,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, X, Y)
ruleMetric <- unique(ruleMetric)
ruleMetric
ruleExec <- extractRules(tree_list,X)
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
ruleMetric <- pruneRule(ruleMetric,X,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, X, Y)
ruleMetric <- unique(ruleMetric)
ruleMetric
debug(getRuleMetric)
ruleMetric <- getRuleMetric(ruleExec,X,Y)
dIx
ruleMetric[1,]
ruleExec[1]
ruleExec[,"condition",drop=FALSE]
ruleExec = ruleExec[1:2]
ruleMetric <- t(sapply(ruleExec[,"condition",drop=FALSE],measureRule,X,target))
ruleMetric <- getRuleMetric(ruleExec,X,Y)
ruleMetric
debug(measureRule)
ruleMetric <- getRuleMetric(ruleExec,X,Y)
len
ruleExec
X
ruleExec
treeList <- RF2List(rf)
ruleExec <- extractRules(treeList,X)
sourceDir("devR/")
thisData <- c("german.data")
path <- paste(getwd(), "/data/",thisData,sep=""); #musk vehicle is good austra
X <- read.table(path,header=TRUE,sep = ",")
X[X[,]=="?"] <- NA
X <- na.roughfix(X)#Impute Missing Values by median/mode
Y <-  X[,ncol(X)]
X <- X[,-ncol(X)]
#Orig RF and calculate the importance
rf <- randomForest(X, as.factor(Y),ntree=2)
treeList <- RF2List(rf)
ruleExec <- extractRules(treeList,X)
ruleExec
X
getRuleMetric
X[1:3,]
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf <- randomForest(X, as.factor(Y),ntree=100)
rf
tree_list <- RF2List(rf)
rule_exec <- extractRules(tree_list,X,digits=3)
rule_exec
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
rule_metric
getRuleMetric
X
library(ranger)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
ruleExec <- extractRules(tree_list,X)
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
length(ruleExec)
X[1:2,]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
debug(measureRule)
ruleMetric <- getRuleMetric(ruleExec,X,Y)
ruleExec
which( X[,1]>5.45 & X[,2]>3.65 & X[,2]>2.3 & X[,3]<=2.45 & X[,3]>4.75 & X[,4]>1.65 )
i = 1
treeInfo(rf_ranger, tree = i)
require(ranger)
Ranger2List <- function(rf_ranger)
{
formatRanger <- function(tree){
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild` + 1
tree$`right daughter` <- tree$`rightChild` + 1
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- tree[,c("left daughter","right daughter","split var","split point","status")]
tree <- as.data.frame(tree)
return(tree)
}
treeList <- NULL
treeList$ntree <- rf_ranger$num.trees
treeList$list <- vector("list",rf_ranger$num.trees)
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
return(treeList)
}
library(ranger)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
tree_list
undebug(getRuleMetric)
undebug(getRuleMetric)
# Test Ranger
library(ranger)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
ruleExec <- extractRules(tree_list,X)
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
undebug(measureRule)
# Test Ranger
library(ranger)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
ruleExec <- extractRules(tree_list,X)
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
getRuleMetric <-
function(ruleExec, X, target){
#typeX = getTypeX(X)
#ruleExec <- unique(t(sapply(allRulesList,RuleList2Exec,typeX=typeX)))
#colnames(ruleExec) <- c("len","condition")
ruleMetric <- t(sapply(ruleExec[,"condition",drop=FALSE],measureRule,X,target))
rownames(ruleMetric) = NULL;
# ruleMetric <- cbind( ruleExec[,1] ,  ruleMetric )
colnames(ruleMetric) <- c("len","freq","err","condition","pred")
dIx <- which(ruleMetric[,"len"]=="-1")
if(length(dIx)>0){
ruleMetric <- ruleMetric[-dIx,]
print(paste( length(dIx)," paths are ignored.",sep=""))
}
return(ruleMetric)
#qIx = order((1- as.numeric(ruleMetric[,"err"])),
#            as.numeric(ruleMetric[,"freq"]),
#            -as.numeric(ruleMetric[,"len"]),
#            decreasing=TRUE)
#return(ruleMetric[qIx,])
}
require(ranger)
Ranger2List <- function(rf_ranger)
{
formatRanger <- function(tree){
rownames(tree) <- 1:nrow(tree)
tree$`status` <- ifelse(tree$`terminal`==TRUE,-1,1)
tree$`left daughter` <- tree$`leftChild` + 1
tree$`right daughter` <- tree$`rightChild` + 1
tree$`split var` <- tree$`splitvarID`
tree$`split point` <- tree$`splitval`
tree$`prediction` <- tree$`prediction`
tree <- tree[,c("left daughter","right daughter","split var","split point","status")]
tree <- as.data.frame(tree)
return(tree)
}
treeList <- NULL
treeList$ntree <- rf_ranger$num.trees
treeList$list <- vector("list",rf_ranger$num.trees)
for(i in 1:rf_ranger$num.trees){
treeList$list[[i]] <- formatRanger( treeInfo(rf_ranger, tree = i) )
}
return(treeList)
}
library(ranger)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
tree_list
tree_list$list[[1]]
ruleExec <- extractRules(tree_list,X)
ruleExec[1,]
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
ruleMetric <- pruneRule(ruleMetric,X,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, X, Y)
ruleMetric <- unique(ruleMetric)
ruleClassifier <- buildLearner(ruleMetric,X,Y)
readable <- presentRules(ruleClassifier,colnames(X),digits=3)
pred <- applyLearner(ruleClassifier,X)
print( 1-sum(pred==Y)/length(pred) )
# This is file is temporary
rm(list=ls(all=TRUE))
library(randomForest);
library(RRF);
graphics.off()
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("devR/")
# Test Ranger
library(ranger)
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
ruleExec <- extractRules(tree_list,X)
ruleExec <- unique(ruleExec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(ruleExec),min(2000,length(ruleExec))) #randomly select 2000 rules
ruleExec <- ruleExec[ix,,drop=FALSE]
ruleMetric <- getRuleMetric(ruleExec,X,Y)
ruleMetric <- pruneRule(ruleMetric,X,Y,typeDecay = 1)
ruleSelect <- selectRuleRRF(ruleMetric, X, Y)
ruleMetric <- unique(ruleMetric)
ruleClassifier <- buildLearner(ruleMetric,X,Y)
readable <- presentRules(ruleClassifier,colnames(X),digits=3)
pred <- applyLearner(ruleClassifier,X)
print( 1-sum(pred==Y)/length(pred) )
ruleClassifier
